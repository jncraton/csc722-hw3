% CSC 722 Homework 3
% Jon Craton
% September 14th, 2018

Problem 1
=========

Find norm 0, norm 1, norm 2, norm 3, and norm infinity of vectors 
a = (1, -2, 3, 5, 9, 1) and b = (0, 1, 2, -1, 3, 2) 

Initialization
--------------

```python
from numpy.linalg import norm

a = [1, -2, 3, 5, 9, 1]
b = [0, 1, 2, -1, 3, 2]
```

Norm 0
------

```python
def norm0(v):
  """
  Returns the norm 0 of a vector

  Quick tests against numpy implementation
  >>> norm0(a) == norm(a,0)
  True
  >>> norm0(b) == norm(b,0)
  True
  """
  
  return sum([1 for i in v if i != 0])
```

```python
norm0(a)
```

```python
norm0(b)
```

Norm 1
------

```python
def norm1(v):
  """
  Returns the norm 1 of a vector

  Quick tests against numpy implementation
  >>> norm1(a) == norm(a,1)
  True
  >>> norm1(b) == norm(b,1)
  True
  """
  
  return sum([abs(i) for i in v])
```

```python
norm1(a)
```

```python
norm1(b)
```

Norm 2
------

```python
def norm2(v):
  """
  Returns the norm 2 of a vector

  Quick tests against numpy implementation
  >>> norm2(a) == norm(a,2)
  True
  >>> norm2(b) == norm(b,2)
  True
  """
  
  return sum([i**2 for i in v])**.5
```

```python
norm2(a)
```

```python
norm2(b)
```

Norm ∞
------

```python
def norm_inf(v):
  """
  Returns the norm ∞ of a vector

  Quick tests against numpy implementation
  >>> norm_inf(a) == norm(a,float('inf'))
  True
  >>> norm_inf(b) == norm(b,float('inf'))
  True
  """
  
  return max([abs(i) for i in v])
```

```python
norm_inf(a)
```

```python
norm_inf(b)
```

Problem 2
=========

Find the Euclidian distance and Manhattan distance between:

```python
a = [1, -2, 3, 5, 9, 1]
b = [0, 1, 2, -1, 3, 2]
```

Euclidean distance
------------------

```python
from scipy.spatial.distance import euclidean

def euclidean_distance(a, b):
  """
  Return Euclidean distance between 2 vectors

  >>> euclidean_distance([3,4],[0,0])
  5.0

  Test against scipy implementation:
  >>> euclidean_distance(a,b) == euclidean(a,b)
  True
  """
  
  return sum([ (i-j)**2 for i,j in zip(a,b) ])**.5

euclidean_distance(a, b)
```

Manhattan distance
------------------

```python
from scipy.spatial.distance import cityblock

def manhattan_distance(a, b):
  """
  Return Manhattan distance between 2 vectors

  >>> manhattan_distance([3,4],[0,0])
  7

  Test against scipy implementation:
  >>> manhattan_distance(a,b) == cityblock(a,b)
  True
  """
  
  return sum([ abs(i-j) for i,j in zip(a,b) ])

manhattan_distance(a, b)
```

Problem 3
=========

Proof the triangle inequality 

    |x| + |y| ≥ |x + y| 

Some proof ideas are borrowed from [Math.SE](https://math.stackexchange.com/questions/307348/proof-of-triangle-inequality).

    1. |x| + |y| ≥ |x + y|

We see that both sides of our inequality are positive real numbers, so we can sqaure them simply as:

    2. (|x| + |y|)² ≥ (|x + y|)²

Because (|x|)² = x² for x∈ℝ, we can simplify the right hand side:

    3. (|x| + |y|)² ≥ (x + y)²

We can then factor to:

    4. (|x|)² + (|y|)² + 2|x||y| ≥ x² + y² + 2xy
    5. x² + y² + 2|x||y| ≥ x² + y² + 2xy

We can then cancel the sqaure terms:

    6. 2|x||y| ≥ 2xy

And divide by 2:

    7. |x||y| ≥ xy

It is now trivial to see that this is true by cases:

    0 ≥ 0 when x=0 or y=0
    + ≥ - when x<0 xor y<0
    + ≥ + when x<0 and y<0
    + ≥ + when x>0 and y>0

Therefore, we have shown that:

    |x| + |y| ≥ |x + y| 

Problem 4
=========

Let’s assume a = (1, -2, 3, 5, 9, 1), b = (0, 1, 2, -1, 3, 2), and c = a – 2b, find ‖c‖₀,‖c‖₁,‖c‖₂,‖c‖∞

First, let's find c.

```python
a = [1, -2, 3, 5, 9, 1]
b = [0, 1, 2, -1, 3, 2]

c = [i - 2*j for i,j in zip(a,b)]
c
```

We can now use the functions that we built earlier to find the requested norms.

```python
norm0(c)
```

```python
norm1(c)
```

```python
norm2(c)
```

```python
norm_inf(c)
```
